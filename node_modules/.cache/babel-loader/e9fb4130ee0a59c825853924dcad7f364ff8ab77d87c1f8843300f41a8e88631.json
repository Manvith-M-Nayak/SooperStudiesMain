{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manvi\\\\.vscode\\\\New\\\\SooperStudiesMain\\\\src\\\\pages\\\\MemoryGames.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport HeaderWithSidebar from '../Sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Memorygames() {\n  _s();\n  const [cards, setCards] = useState(shuffleCards());\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [score, setScore] = useState(0);\n\n  // Function to shuffle cards\n  function shuffleCards() {\n    const cardValues = ['A', 'B', 'C', 'D']; // Example values\n    const doubledCards = [...cardValues, ...cardValues];\n    return doubledCards.sort(() => Math.random() - 0.5).map((value, index) => ({\n      id: index,\n      value,\n      flipped: false\n    }));\n  }\n\n  // Handle card click\n  const handleCardClick = id => {\n    if (flippedCards.length === 2 || matchedCards.includes(id)) return;\n    const updatedCards = cards.map(card => card.id === id ? {\n      ...card,\n      flipped: true\n    } : card);\n    setCards(updatedCards);\n    const newFlippedCards = [...flippedCards, id];\n    setFlippedCards(newFlippedCards);\n    if (newFlippedCards.length === 2) {\n      checkForMatch(newFlippedCards, updatedCards);\n    }\n  };\n  const checkForMatch = (flipped, updatedCards) => {\n    const [firstCard, secondCard] = flipped.map(id => updatedCards.find(card => card.id === id));\n    if (firstCard.value === secondCard.value) {\n      setMatchedCards(prev => [...prev, firstCard.id, secondCard.id]);\n      setScore(score + 1);\n    } else {\n      setTimeout(() => {\n        setCards(prev => prev.map(card => flipped.includes(card.id) ? {\n          ...card,\n          flipped: false\n        } : card));\n      }, 1000);\n    }\n    setFlippedCards([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HeaderWithSidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Memory Games\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Test and improve your memory with this card-matching game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-grid\",\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card ${card.flipped || matchedCards.includes(card.id) ? 'flipped' : ''}`,\n          onClick: () => handleCardClick(card.id),\n          children: card.flipped || matchedCards.includes(card.id) ? card.value : '?'\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your current score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => resetGame(),\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n\n  // Reset the game\n  function resetGame() {\n    setCards(shuffleCards());\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setScore(0);\n  }\n}\n_s(Memorygames, \"yy8z64y/CBS8+Cd5M9jhpe7gvx0=\");\n_c = Memorygames;\nexport default Memorygames;\nvar _c;\n$RefreshReg$(_c, \"Memorygames\");","map":{"version":3,"names":["React","useState","HeaderWithSidebar","jsxDEV","_jsxDEV","Memorygames","_s","cards","setCards","shuffleCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","score","setScore","cardValues","doubledCards","sort","Math","random","map","value","index","id","flipped","handleCardClick","length","includes","updatedCards","card","newFlippedCards","checkForMatch","firstCard","secondCard","find","prev","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","resetGame","_c","$RefreshReg$"],"sources":["C:/Users/manvi/.vscode/New/SooperStudiesMain/src/pages/MemoryGames.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport HeaderWithSidebar from '../Sidebar';\r\n\r\nfunction Memorygames() {\r\n  const [cards, setCards] = useState(shuffleCards());\r\n  const [flippedCards, setFlippedCards] = useState([]);\r\n  const [matchedCards, setMatchedCards] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n\r\n  // Function to shuffle cards\r\n  function shuffleCards() {\r\n    const cardValues = ['A', 'B', 'C', 'D']; // Example values\r\n    const doubledCards = [...cardValues, ...cardValues];\r\n    return doubledCards.sort(() => Math.random() - 0.5).map((value, index) => ({\r\n      id: index,\r\n      value,\r\n      flipped: false,\r\n    }));\r\n  }\r\n\r\n  // Handle card click\r\n  const handleCardClick = (id) => {\r\n    if (flippedCards.length === 2 || matchedCards.includes(id)) return;\r\n\r\n    const updatedCards = cards.map((card) =>\r\n      card.id === id ? { ...card, flipped: true } : card\r\n    );\r\n    setCards(updatedCards);\r\n\r\n    const newFlippedCards = [...flippedCards, id];\r\n    setFlippedCards(newFlippedCards);\r\n\r\n    if (newFlippedCards.length === 2) {\r\n      checkForMatch(newFlippedCards, updatedCards);\r\n    }\r\n  };\r\n  \r\n  const checkForMatch = (flipped, updatedCards) => {\r\n    const [firstCard, secondCard] = flipped.map((id) =>\r\n      updatedCards.find((card) => card.id === id)\r\n    );\r\n\r\n    if (firstCard.value === secondCard.value) {\r\n      setMatchedCards((prev) => [...prev, firstCard.id, secondCard.id]);\r\n      setScore(score + 1);\r\n    } else {\r\n      setTimeout(() => {\r\n        setCards((prev) =>\r\n          prev.map((card) =>\r\n            flipped.includes(card.id) ? { ...card, flipped: false } : card\r\n          )\r\n        );\r\n      }, 1000);\r\n    }\r\n\r\n    setFlippedCards([]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HeaderWithSidebar />\r\n      <div className=\"content\">\r\n        <h1>Memory Games</h1>\r\n        <p>Test and improve your memory with this card-matching game!</p>\r\n        <div className=\"card-grid\">\r\n          {cards.map((card) => (\r\n            <div\r\n              key={card.id}\r\n              className={`card ${card.flipped || matchedCards.includes(card.id) ? 'flipped' : ''}`}\r\n              onClick={() => handleCardClick(card.id)}\r\n            >\r\n              {card.flipped || matchedCards.includes(card.id) ? card.value : '?'}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <p>Your current score: {score}</p>\r\n        <button onClick={() => resetGame()}>Reset Game</button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Reset the game\r\n  function resetGame() {\r\n    setCards(shuffleCards());\r\n    setFlippedCards([]);\r\n    setMatchedCards([]);\r\n    setScore(0);\r\n  }\r\n}\r\n\r\nexport default Memorygames;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}